generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("CUSTOM_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String   @id @default(cuid())
  username     String
  avatar       String
  banner       String?
  banner_color String?
  bio          String?
  joinedAt     DateTime @default(now())

  favoriteServers Server[] @relation("UserFavoriteServers")
  favoriteBots    Bot[]    @relation("UserFavoriteBots")

  ownedServers  Server[] @relation("OwnedServers")
  developedBots Bot[]    @relation("BotDevelopers")

  // 使用者社群資訊（彈性 json 欄位）
  social  Json? // 儲存如：{ "twitter": "dawngs", "github": "dgsbot" }

  votes    Vote[]

  reports Report[] @relation("UserReports")
  handledReports Report[]  @relation("HandledReports")
  handledBots Bot[]  @relation("HandleBots")
}

enum EmailPriority {
  success
  info
  warning
  danger
}

enum Status {
  pending
  approved
  rejected
}

model Notification {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  subject   String
  teaser    String
  content String
  userId    String? // null is global broadcast
  priority  EmailPriority @default(info)
  isSystem  Boolean       @default(false)
  read      Boolean       @default(false)
}

model Server {
  id              String   @id
  name            String
  description     String
  longDescription String? // optional
  tags            String[]
  members         Int
  online          Int?
  upvotes         Int
  icon            String?
  banner          String?
  featured        Boolean  @default(false)
  createdAt       DateTime @default(now())
  ownerId         String?
  owner           User?    @relation("OwnedServers", fields: [ownerId], references: [id])
  website         String?
  inviteUrl       String?
  rules           String[]
  features        String[]
  screenshots     String[]

  favoritedBy User[] @relation("UserFavoriteServers")

  Review Review[]
}

model Bot {
  id              String    @id
  name            String
  description     String
  longDescription String?
  tags            String[]
  servers         Int
  users           Int
  upvotes         Int
  icon            String?
  banner          String?
  featured        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  approvedAt      DateTime?
  prefix          String?
  developers      User[]    @relation("BotDevelopers")
  website         String?
  inviteUrl       String?
  supportServer   String?
  verified        Boolean   @default(false)
  status          Status    @default(pending)
  features        String[]
  screenshots     String[]

  rejectionReason String?
    handledById    String?        // ✅ 處理者 ID（optional）
  handledBy      User?          @relation("HandleBots", fields: [handledById], references: [id])
  handledAt      DateTime?      // ✅ 處理時間（optional）

  favoritedBy User[] @relation("UserFavoriteBots")

  commands BotCommand[] // One-to-many relation
  Review   Review[]
}

model BotCommand {
  id          String  @id @default(cuid())
  name        String
  description String
  usage       String
  category    String?
  botId       String
  bot         Bot     @relation(fields: [botId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  vote      Int
  comment   String?
  createdAt DateTime @default(now())
  userId    String

  botId String?
  bot   Bot?    @relation(fields: [botId], references: [id])

  serverId String?
  server   Server? @relation(fields: [serverId], references: [id])
}

model Report {
  id          String         @id @default(cuid())
  subject     String
  content     String

  reportedAt  DateTime       @default(now())
  status      ReportStatus   @default(pending)
  severity    ReportSeverity @default(untagged)
  attachments Json
  type        ReportType
  itemId      String
  itemName    String

  // 舉報者
  reportedById String
  reportedBy   User   @relation("UserReports", fields: [reportedById], references: [id])

    // 處理結果
  resolutionNote String?
  handledById    String?
  handledBy      User?          @relation("HandledReports", fields: [handledById], references: [id])
  handledAt      DateTime? 
}

enum ReportStatus {
  pending
  resolved
  rejected
}

enum ReportSeverity {
  severe
  moderate
  low
  untagged
}

enum ReportType {
  bot
  server
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  itemId    String // serverId 或 botId
  itemType  VoteType
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

enum VoteType {
  server
  bot
}